scriptencoding utf-8
if &compatible
	set nocompatible
endif

set shell=sh
set shortmess+=I
set runtimepath+=$GOROOT/misc/vim
set nobackup
set noundofile
set t_Co=256 " (breaks CtrlP, Home/End keys without tmux)
colorscheme atom-dark-256
set ai smartindent
set hlsearch
set ignorecase
set smartcase
set showmatch
let c_space_errors=1

if v:version >= 704
	set cryptmethod=blowfish2
else
	" insecure, but Debian likes it
	set cryptmethod=blowfish
endif

set exrc
set secure
set tags=./tags;

set vb
set nomodeline
set noexpandtab
set shiftwidth=8
set tabstop=8

set printdevice=192.168.0.50
set printoptions=paper:a4
set printexpr=system('/usr/local/bin/lpr'\ .\ (&printdevice\ ==\ ''\ ?\ ''\ :\ '\ -P'\ .\ &printdevice)\ .\ '\ '\ .\ v:fname_in)\ .\ delete(v:fname_in)\ +\ v:shell_error

" Change cursor in insert mode
let &t_SI .= "\<Esc>[5 q"
let &t_EI .= "\<Esc>[2 q"

" Spelling support
set nospell spelllang=en_us,de
set spellfile=~/.vim/spell/spellfile.add

let mapleader = '\'
execute pathogen#infect()
Helptags
syntax on
filetype plugin indent on

" ******* BINDINGS ********
" Ctrl Left/Right -> previous/next buffer
nnoremap <silent> <Esc>[D :<C-u>bp<cr>
nnoremap <silent> <Esc>[1;5D :<C-u>bp<cr>
nnoremap <silent> <Esc>[C :<C-u>bn<cr>
nnoremap <silent> <Esc>[1;5C :<C-u>bn<cr>

" CScope

if has('cscope')
	set cscopetag
	set cscopeverbose

	if has('quickfix')
		set cscopequickfix=s-,c-,d-,i-,t-,e-
	endif

	cnoreabbrev csa cs add
	cnoreabbrev csf cs find
	cnoreabbrev csk cs kill
	cnoreabbrev csr cs reset
	cnoreabbrev css cs show
	cnoreabbrev csh cs help

	command -nargs=0 Cscope call Cscope_load()
endif

function! Cscope_load ()
	if filereadable("../../cscope.out")
		cs add ../../cscope.out
	endif
	if filereadable("../cscope.out")
		cs add ../cscope.out
	endif
	if filereadable("cscope.out")
		cs add cscope.out
	endif
endfunction


" ******** PLUGINS ********

" CtrlP
nnoremap <silent> <Esc>[A :<C-u>CtrlPBuffer<cr>
nnoremap <silent> <Esc>[1;5A :<C-u>CtrlPBuffer<cr>
nnoremap <silent> <Esc>Oa :<C-u>CtrlPBuffer<cr>
nnoremap <silent> <Esc>[B :<C-u>CtrlPTag<cr>
nnoremap <silent> <Esc>[1;5B :<C-u>CtrlPTag<cr>
nnoremap <silent> <Esc>Ob :<C-u>CtrlPTag<cr>
let g:ctrlp_regexp = 1
let g:ctrlp_by_filename = 1
let g:ctrlp_custom_ignore = {
 \ 'dir': '\v[\/]\.(git|hg|svn)$|\v[\/](tmp|bak|old|build.*|html)$',
 \ 'file': '\v\.(exe|so|dll|zip|o|a|obj|swp|hi|core|xls|doc|pdf|png|aux|idx|
		\ilg|ind|lof|lot|toc)$',
 \ }
" let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
" \ --ignore .git
" \ --ignore .svn
" \ --ignore ".*"
" \ --ignore tmp
" \ --ignore bak
" \ --ignore old
" \ --ignore "*.exe"
" \ --ignore "*.dll"
" \ --ignore "*.so"
" \ --ignore "*.o"
" \ --ignore "*.zip"
" \ --ignore "*.swp"
" \ --ignore "*.swo"
" \ --ignore "lib*"
" \ --ignore "build*"
" \ --ignore "html"
" \ -g ""'


" Fugitive
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gr :Gremove<CR>
augroup fugitive_tweaks
	autocmd!
	autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
	autocmd BufReadPost fugitive://* set bufhidden=delete
augroup end

" Airline
let g:airline_left_sep='>'
let g:airline_right_sep='<'
let g:airline#extensions#csv#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
set laststatus=2

" ***** Programming stuff *****

" ** C/C++ **
augroup c_source_style
	autocmd!
	autocmd BufNewFile,BufRead *.[cChH],*.cpp,*.cxx,*.c++,*.cc :call FreeBSD_Style()
augroup end

" Follow the FreeBSD style(9).
function! FreeBSD_Style()
	setlocal cindent
	setlocal cinoptions=(4200,u4200,+0.5s,*500,:0,t0,U4200
	setlocal indentexpr=IgnoreParenIndent()
	setlocal indentkeys=0{,0},0),:,0#,!^F,o,O,e
	setlocal textwidth=80
	highlight SpecialKey ctermbg=yellow guibg=yellow
	autocmd BufWinEnter * let w:matchnonascii=matchadd('SpecialKey', "[\x7f-\xff]", -1)
endfun

nnoremap <silent> <leader>u :%!uncrustify -l c 2> /dev/null<CR>ggVG=gg

" Ignore indents caused by parentheses in FreeBSD style.
function! IgnoreParenIndent()
    let indent = cindent(v:lnum)

    if indent > 4000
        if cindent(v:lnum - 1) > 4000
            return indent(v:lnum - 1)
        else
            return indent(v:lnum - 1) + 4
        endif
    else
        return (indent)
    endif
endfun

" ** Haskell **

augroup haskell_source_style
	autocmd!
	autocmd FileType haskell	:call Haskell_Setup()
augroup end

function! Haskell_Setup()
	setlocal tabstop=8
	setlocal expandtab
	setlocal softtabstop=8
	setlocal shiftwidth=8
	setlocal shiftround
endfunction

" ** LaTeX **
augroup latex_source
	autocmd!
	autocmd BufNewFile,BufRead *.tex :set spell
augroup end

" ** Treat whitespace **
highlight ExtraWhitespace ctermbg=red guibg=red
augroup whitespace_errors
	autocmd!
	autocmd BufWinEnter * let w:matchextrawhitespace=matchadd('ExtraWhitespace', '/\s\+$\| \+\ze\t/')
augroup end
highlight ColorColumn ctermbg=darkred
call matchadd('ColorColumn', '\%81v', 100)


" ***** Treat URLs *****

function! Browser ()
    let line = getline (".")
    let line = matchstr (line, "http[^ ]*")
    exec ":silent !firefox ".line
endfunction

nnoremap <Leader>w :call Browser ()<CR>

" Start a local ~/.vimrc_local, if it exists
let s:vimrc_local_name='~/.vimrc_local'
if !empty(glob(s:vimrc_local_name))
	execute 'source' s:vimrc_local_name
endif
