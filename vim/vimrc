scriptencoding utf-8
lang C
if &compatible
	set nocompatible
endif

set shell=sh
set shortmess+=I
set runtimepath+=$GOROOT/misc/vim
set backup
set backupdir=~/.cache/vim
set undofile
set undodir=~/.cache/vim
set t_Co=256 " (breaks CtrlP, Home/End keys without tmux)
set ai smartindent
set hlsearch
set ignorecase
set smartcase
set showmatch
set foldmethod=syntax
set foldnestmax=1
let c_space_errors=1

if v:version >= 704
	set cryptmethod=blowfish2
else
	" unsecure, but Debian likes it
	set cryptmethod=blowfish
endif

set exrc
set secure

set vb
set nomodeline
set noexpandtab
set shiftwidth=8
set tabstop=8

set history=1000
set autoread

" Figure out project directory (we need only git ;) )
let g:shs_project_dir=getcwd()
while g:shs_project_dir != '/' && empty(glob(g:shs_project_dir . '/.git'))
	let g:shs_project_dir=fnamemodify(g:shs_project_dir, ':h')
endwhile
if g:shs_project_dir == '/'
	" fall back to cwd
	let g:shs_project_dir=getcwd()
endif

" Read project-local .vimrc, if any
let s:vimrc_path = g:shs_project_dir . '/.vimrc'
if filereadable(s:vimrc_path)
	execute 'source' s:vimrc_path
endif

" Add project-local ctags database, if any
" This is needed when CWD != project dir
let s:ctags_path = g:shs_project_dir . '/.git/ctags'
if filereadable(s:ctags_path)
	set tags+=s:vimrc_path
endif

" Change cursor in insert mode
if $TERM =~ "rxvt" || $TERM =~ "xterm" || $TERM =~ "^screen"
	let &t_SI .= "\<Esc>[5 q"
	let &t_EI .= "\<Esc>[2 q"
endif

" Spelling support
set nospell spelllang=en_us,de
set spellfile=~/.vim/spell/spellfile.add

let mapleader = '\'
helptags ~/.vim/pack
syntax on
filetype plugin indent on

" ******* BINDINGS ********
" previous/next buffer
nnoremap <silent> <leader>p :<C-u>bp<cr>
nnoremap <silent> <leader>n :<C-u>bn<cr>

" CScope

if has('cscope')
	function! Cscope_load ()
		let l:cscope_path = g:shs_project_dir . '/.git/cscope.db'
		if filereadable(l:cscope_path)
			execute 'cs add' l:cscope_path
		endif
	endfunction

	set cscopetag
	set cscopeverbose

	if has('quickfix')
		set cscopequickfix=s-,c-,d-,i-,t-,e-
	endif

	" cnoreabbrev csa cs add
	" cnoreabbrev csf cs find
	" cnoreabbrev csk cs kill
	" cnoreabbrev csr cs reset
	" cnoreabbrev ^css cs show
	" cnoreabbrev csh cs help

	silent call Cscope_load()
endif



" ******** PLUGINS ********

" CtrlP (X terminal bindings)
"
" Ctrl+up	: buffer list
" Ctrl+down	: ctags list
" Ctrl+left	: file list from current dir
" Ctrl+right	: file list (project dir)
nnoremap <silent> <Esc>Oa :<C-u>CtrlPBuffer<cr>
nnoremap <silent> <Esc>Ob :<C-u>CtrlPTag<cr>
nnoremap <silent> <Esc>Oc :<C-u>CtrlP .<cr>
nnoremap <silent> <Esc>Od :<C-u>CtrlP<cr>

" Other console bindings (compatibility)
nnoremap <silent> <Esc>[A :<C-u>CtrlPBuffer<cr>
nnoremap <silent> <Esc>[1;5A :<C-u>CtrlPBuffer<cr>
nnoremap <silent> <Esc>[B :<C-u>CtrlPTag<cr>
nnoremap <silent> <Esc>[1;5B :<C-u>CtrlPTag<cr>
nnoremap <silent> <Esc>[C :<C-u>CtrlP .<cr>
nnoremap <silent> <Esc>[1;5C :<C-u>CtrlP .<cr>
nnoremap <silent> <Esc>[D :<C-u>CtrlP<cr>
nnoremap <silent> <Esc>[1;5D :<C-u>CtrlP<cr>

" Fix home/end key bindings
" nnoremap <silent> <Esc>[7~ ^
" nnoremap <silent> <Esc>[8~ $
" inoremap <silent> <Esc>[7~ <Esc>^i
" inoremap <silent> <Esc>[8~ <Esc>$a

let g:ctrlp_regexp = 1
let g:ctrlp_by_filename = 1
"let g:ctrlp_custom_ignore = {
" \ 'dir': '\v[\/]\.(git|hg|svn)$|\v[\/](tmp|bak|old|build.*|html)$',
" \ 'file': '\v\.(exe|so|dll|zip|o|a|obj|swp|hi|core|xls|doc|pdf|png|aux|idx|
"      	\ilg|ind|lof|lot|toc)$',
" \ }
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
\ --ignore ".git"
\ --ignore ".svn"
\ --ignore ".hg"
\ --ignore ".*"
\ --ignore "*.exe"
\ --ignore "*.dll"
\ --ignore "*.so"
\ --ignore "*.[ao]"
\ --ignore "*.obj"
\ --ignore "*.zip"
\ --ignore "*.sw[p-z]"
\ --ignore "*.hi"
\ --ignore "*.core"
\ --ignore "*.xls"
\ --ignore "*.doc"
\ --ignore "*.pdf"
\ --ignore "*.png"
\ --ignore "*.aux"
\ --ignore "*.idx"
\ --ignore "*.ilg"
\ --ignore "*.ind"
\ --ignore "*.lo[cft]"
\ -g ""'


" Fugitive
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gr :Gremove<CR>
augroup fugitive_tweaks
	autocmd!
	autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
	autocmd BufReadPost fugitive://* set bufhidden=delete
augroup end

" Airline
let g:airline_left_sep='>'
let g:airline_right_sep='<'
let g:airline#extensions#csv#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
set laststatus=2

" ***** Programming stuff *****

" ** General **
augroup general
	autocmd!
	autocmd BufNewFile,BufRead * :call General_Setup()
	autocmd Filetype * :call General_Setup()
augroup end

function! General_Setup()
	setlocal textwidth=80
	highlight ColorColumn ctermbg=darkred ctermfg=white guibg=darkred guifg=white
	call matchadd('ColorColumn', '\%81v', 100)
	highlight ExtraWhitespace ctermbg=darkred ctermfg=darkred guibg=darkred guifg=darkred
endfunction

function! ASCII_Only_File()
	highlight NonASCII ctermbg=yellow guibg=yellow
	call matchadd('NonASCII', "[\x7f-\xff]", -1)
endfunction

" ** C/C++ **
augroup c_source_style
	autocmd!
	autocmd BufNewFile,BufRead *.[cChH],*.cpp,*.cxx,*.c++,*.cc :call C_Setup()
augroup end

function! C_Setup()
	call FreeBSD_Style()
	call WhiteSpace_Setup_C()
	call ASCII_Only_File()
endfunction

" Follow the FreeBSD style(9).
function! FreeBSD_Style()
	setlocal cindent
	setlocal cinoptions=(4200,u4200,+0.5s,*500,:0,t0,U4200
	setlocal indentexpr=IgnoreParenIndent()
	setlocal indentkeys=0{,0},0),:,0#,!^F,o,O,e
endfun

nnoremap <silent> <leader>i :call Indent()<CR>

" indent buffer
function! Indent()
	silent set fileformat=unix
	silent exec ":%!indent"
	silent exec ":%s/\\s*$//"
	silent normal ggVG=gg
endfun

" Ignore indents caused by parentheses in FreeBSD style.
function! IgnoreParenIndent()
    let indent = cindent(v:lnum)

    if indent > 4000
        if cindent(v:lnum - 1) > 4000
		return indent(v:lnum - 1)
        else
		return indent(v:lnum - 1) + 4
        endif
    else
        return (indent)
    endif
endfun

" ** Haskell **

augroup haskell_source_style
	autocmd!
	autocmd FileType haskell	:call Haskell_Setup()
augroup end

function! Haskell_Setup()
	setlocal tabstop=8
	setlocal expandtab
	setlocal softtabstop=8
	setlocal shiftwidth=8
	setlocal shiftround
	call matchadd('ExtraWhitespace', '^ *\t\+ *\|\s\+$\| \+\ze\t', 100)
	call ASCII_Only_File()
endfunction

" ** PHP **

augroup php_source_style
	autocmd!
	autocmd FileType php	:call PHP_Setup()
augroup end

function! PHP_Setup()
	setlocal tabstop=2
	setlocal expandtab
	setlocal softtabstop=0
	setlocal shiftwidth=2
	setlocal shiftround
	call matchadd('ExtraWhitespace', '^ *\t\+ *\|\s\+$\| \+\ze\t', 100)
	call ASCII_Only_File()
endfunction

" ** LaTeX **
augroup latex_source
	autocmd!
	autocmd FileType tex	:call LaTeX_Setup()
augroup end

function! LaTeX_Setup()
	setlocal spell
endfunction

" ** Emails **
augroup email_edit
	autocmd!
	autocmd FileType mail	:call Mail_Setup()
augroup end

function! Mail_Setup()
	setlocal spell
	setlocal nofoldenable
endfunction

" ** Makefiles **

augroup makefile_edit
	autocmd!
	autocmd FileType make	:call Makefile_Setup()
augroup end

function! Makefile_Setup()
	call WhiteSpace_Setup_C()
	call ASCII_Only_File()
endfunction

" ** Treat whitespace **
function! WhiteSpace_Setup_C()
	call matchadd('ExtraWhitespace', '^     \+\|^\t\+         \+\|\s\+$\| \+\ze\t', 100)
endfunction

" Fixups for colorscheme
function! FixColorscheme()
	highlight! IncSearch ctermfg=172 ctermbg=16
endfun

augroup fix_color_scheme
	autocmd!
	autocmd ColorScheme * call FixColorscheme()
augroup end

" ***** Treat URLs *****

function! Browser ()
    let line = getline (".")
    let line = matchstr (line, "http[^ ]*")
    exec ":silent !firefox ".line
endfunction

nnoremap <silent> <leader>w :call Browser ()<CR>
nnoremap <silent> <leader>e :Lexplore<CR>

" Start a local ~/.vimrc_local, if it exists
let s:vimrc_local_name='~/.vimrc_local'
if !empty(glob(s:vimrc_local_name))
	execute 'source' s:vimrc_local_name
endif

colorscheme atom-dark-256
set printoptions=paper:a4
set printexpr=system('/usr/local/bin/lpr'\ .\ (&printdevice\ ==\ ''\ ?\ ''\ :\ '\ -P'\ .\ &printdevice)\ .\ '\ '\ .\ v:fname_in)\ .\ delete(v:fname_in)\ +\ v:shell_error
