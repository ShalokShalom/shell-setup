scriptencoding utf-8
if &compatible
	set nocompatible
endif

set shell=sh
set shortmess+=I
set runtimepath+=$GOROOT/misc/vim
set nobackup
set noundofile
set t_Co=256 " (breaks CtrlP, Home/End keys without tmux)
colorscheme atom-dark-256
set ai smartindent
set hlsearch
set ignorecase
set smartcase
set showmatch
let c_space_errors=1

if v:version >= 704
	set cryptmethod=blowfish2
else
	" insecure, but Debian likes it
	set cryptmethod=blowfish
endif

set exrc
set secure
set tags=./tags;

set vb
set nomodeline
set noexpandtab
set shiftwidth=8
set tabstop=8

set printdevice=192.168.0.50
set printoptions=paper:a4
set printexpr=system('/usr/local/bin/lpr'\ .\ (&printdevice\ ==\ ''\ ?\ ''\ :\ '\ -P'\ .\ &printdevice)\ .\ '\ '\ .\ v:fname_in)\ .\ delete(v:fname_in)\ +\ v:shell_error

let mapleader = '\'
execute pathogen#infect()
Helptags
syntax on
filetype plugin indent on

" ******* BINDINGS ********
" Ctrl Left/Right -> previous/next buffer
nnoremap <silent> <Esc>[D :<C-u>bp<cr>
nnoremap <silent> <Esc>[C :<C-u>bn<cr>

" ******** PLUGINS ********

" Unite
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#profile('default', 'context', {
\	'smartcase': 1,
\	})

let s:ignore_globs = [
	\ 'tmp', '*.obj', '*.o', '*.core', '*.hi', '*.pdf', '*.png',
	\ '*.a', '*.la', '*.doc', '*.xls'
	\ ]
call unite#custom#source('line,outline','matchers','matcher_fuzzy')
call unite#custom#source('file_rec/async', 'ignore_globs', s:ignore_globs)
call unite#custom#source('file_rec', 'ignore_globs', s:ignore_globs)
call unite#custom#source('file_rec/async', 'ignore_pattern', '\..*')
call unite#custom#source('file_rec', 'ignore_pattern', '\..*')
let g:unite_source_history_yank_enable = 1
" let g:unite_source_grep_command = 'ag'
nnoremap <silent> <Esc>[A :<C-u>Unite -toggle -start-insert buffer<cr>
nnoremap <silent> <C-P> :<C-u>Unite -toggle -start-insert file_rec/git file_rec/async<cr>
nnoremap <silent> <Esc>[B :<C-u>Unite -toggle -start-insert tag<cr>
nnoremap <silent> <leader>uq :<C-u>Unite -toggle quickfix<cr>

augroup unite_tweaks
	autocmd!
	autocmd BufEnter *
	\ if empty(&buftype)
	\| nnoremap <buffer> g] m':<C-u>UniteWithCursorWord -immediately tag<CR>
	\| nnoremap <buffer> <C-]> m':<C-u>UniteWithCursorWord -immediately tag<CR>
	\| endif
augroup end

" Fugitive
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gr :Gremove<CR>
augroup fugitive_tweaks
	autocmd!
	autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
	autocmd BufReadPost fugitive://* set bufhidden=delete
augroup end

" Airline
let g:airline_left_sep='>'
let g:airline_right_sep='<'
let g:airline#extensions#csv#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
set laststatus=2

" ***** Programming stuff *****

" ** C/C++ **
augroup c_source_style
	autocmd!
	autocmd BufRead *.[cChH],*.cpp,*.cxx,*.c++,*.cc :call FreeBSD_Style()
augroup end

" Follow the FreeBSD style(9).
function! FreeBSD_Style()
	setlocal cindent
	setlocal cinoptions=(4200,u4200,+0.5s,*500,:0,t0,U4200
	setlocal indentexpr=IgnoreParenIndent()
	setlocal indentkeys=0{,0},0),:,0#,!^F,o,O,e
	setlocal textwidth=80
	highlight SpecialKey ctermbg=yellow guibg=yellow
	autocmd BufWinEnter * let w:matchnonascii=matchadd('SpecialKey', "[\x7f-\xff]", -1)
endfun

" Ignore indents caused by parentheses in FreeBSD style.
function! IgnoreParenIndent()
    let indent = cindent(v:lnum)

    if indent > 4000
        if cindent(v:lnum - 1) > 4000
            return indent(v:lnum - 1)
        else
            return indent(v:lnum - 1) + 4
        endif
    else
        return (indent)
    endif
endfun

" ** Haskell **:w

augroup haskell_source_style
	autocmd!
	autocmd FileType haskell	:call Haskell_Setup()
augroup end

function! Haskell_Setup()
	setlocal tabstop=8
	setlocal expandtab
	setlocal softtabstop=8
	setlocal shiftwidth=8
	setlocal shiftround
endfunction

" ** Treat whitespace **
highlight ExtraWhitespace ctermbg=red guibg=red
augroup whitespace_errors
	autocmd!
	autocmd BufWinEnter * let w:matchextrawhitespace=matchadd('ExtraWhitespace', '/\s\+$\| \+\ze\t/')
augroup end
highlight ColorColumn ctermbg=darkred
call matchadd('ColorColumn', '\%81v', 100)


" ***** Treat URLs *****

function! Browser ()
    let line = getline (".")
    let line = matchstr (line, "http[^ ]*")
    exec ":silent !firefox ".line
endfunction

nnoremap <Leader>w :call Browser ()<CR>
